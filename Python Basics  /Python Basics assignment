1. Explain the key features of Python that make it a popular choice for programming

Python is a popular programming language due to its simplicity, flexibility, and power. Here are the key features that make Python a preferred choice 

1. Easy to Learn and Use
Simple Syntax: Python code is clean and resembles English, making it beginner-friendly.

Minimal Code: Tasks that require many lines in other languages can often be done in fewer lines with Python.

2. Interpreted Language
Python code is executed line by line, which makes debugging easier and allows quick testing of small code changes.

3. High-Level Language
Abstracts low-level details like memory management, allowing developers to focus on logic rather than hardware-level code.

4. Extensive Standard Library
Offers built-in modules for tasks like file I/O, regular expressions, math operations, JSON, networking, and more.

5. Object-Oriented and Functional Programming Support
Supports multiple paradigms:

Object-Oriented: Classes and objects

Functional: Functions as first-class citizens, lambdas, map/filter/reduce


2. Describe the role of predefined keywords in Python and provide examples of how they are used in program.

Predefined keywords (also called reserved words) are words that have special meaning in Python. They are part of the language syntax and cannot be used as variable names, function names, or identifiers.

Examples of Common Python Keywords

if, else, elif --	Conditional branching
for, while--	Looping
def, return--	Function definition
class --	Define a class
True, False--	Boolean values
and, or, not--	Logical operations
in, is--	Membership and identity checks
break, continue, pass	-- Loop control

Conditional Keyword Example: if, else
x = 10
if x > 5:
    print("x is greater than 5")
else:
    print("x is 5 or less")

Logical Operators: and, or, not

a = True
b = False
print(a and b)  # False

3. Compare and contrast mutable and immutable objects in Python with examples

Mutable and immutable objects behave differently when modified

Mutuable Can be changed after creation but immutables are not
Mutuable objects -- list, dict,set
Immutable objects -- int, float, str, tuple, bool
In mutuable same objects can modified but in immutable new object created

Mutuable objects --

my_list = [1, 2, 3]
print(id(my_list))  # Before

my_list.append(4)    # Modifies original list
print(my_list)       # Output: [1, 2, 3, 4]

Immutable Objects --

x = 5
print(id(x))
x = x + 1
print(x)        # 6
print(id(x))    # Different ID — new object


4. Discuss the different types of operators in Python and provide examples of how they are used

Python provides a variety of operators to perform operations on variables and values. These are categorized into several types based on their functionality.

1. Arithmetic Operators
Used for basic mathematical operations.

| Operator | Description         | Example  | Result |
| -------- | ------------------- | -------- | ------ |
| `+`      | Addition            | `3 + 2`  | `5`    |
| `-`      | Subtraction         | `5 - 1`  | `4`    |
| `*`      | Multiplication      | `4 * 3`  | `12`   |
| `/`      | Division            | `10 / 2` | `5.0`  |
| `//`     | Floor Division      | `7 // 2` | `3`    |
| `%`      | Modulus (remainder) | `7 % 2`  | `1`    |
| `**`     | Exponentiation      | `2 ** 3` | `8`    |


 2. Assignment Operators
Used to assign values to variables.

| Operator | Example   | Equivalent To |
| -------- | --------- | ------------- |
| `=`      | `x = 5`   | `x = 5`       |
| `+=`     | `x += 2`  | `x = x + 2`   |
| `-=`     | `x -= 3`  | `x = x - 3`   |
| `*=`     | `x *= 4`  | `x = x * 4`   |
| `/=`     | `x /= 2`  | `x = x / 2`   |
| `//=`    | `x //= 2` | `x = x // 2`  |
| `%=`     | `x %= 3`  | `x = x % 3`   |
| `**=`    | `x **= 2` | `x = x ** 2`  |

3. Comparison (Relational) Operators
Used to compare values and return Boolean (True/False).

| Operator | Example  | Result  |
| -------- | -------- | ------- |
| `==`     | `5 == 5` | `True`  |
| `!=`     | `4 != 3` | `True`  |
| `>`      | `7 > 2`  | `True`  |
| `<`      | `2 < 1`  | `False` |
| `>=`     | `5 >= 5` | `True`  |
| `<=`     | `3 <= 2` | `False` |


4. Logical Operators
Used to combine multiple conditions.

| Operator | Description                  | Example          | Result  |
| -------- | ---------------------------- | ---------------- | ------- |
| `and`    | True if both are true        | `True and False` | `False` |
| `or`     | True if at least one is true | `True or False`  | `True`  |
| `not`    | Negates the result           | `not True`       | `False` |


5. Explain the concept of type casting in Python with examples

Type casting (also called type conversion) is the process of converting the data type of a variable or value into another type.

Python supports two types of casting:

1. Implicit Type Casting (Automatic)
Python automatically converts one data type to another when it is safe to do so.

Example:

a = 5        # int
b = 2.5      # float

result = a + b   # int + float = float
print(result)    # 7.5
print(type(result))  # <class 'float'>

2.  Explicit Type Casting (Manual)
You manually convert one type to another using casting functions.

Examples
str() – Convert to String

x = 100
s = str(x)
print(s)            # '100'
print(type(s))      # <class 'str'>

6. How do conditional statements work in Python? Illustrate with examples

Conditional statements are used to perform different actions based on different conditions. Python uses if, elif, and else statements to control the flow of a program.

marks = 85

if marks >= 90:
    print("Grade: A")
elif marks >= 75:
    print("Grade: B")
elif marks >= 60:
    print("Grade: C")
else:
    print("Grade: D")




7. Describe the different types of loops in Python and their use cases with examples.

Loops in Python: Types, Use Cases & Examples
Loops in Python are used to repeat a block of code multiple times. This is useful when performing tasks like iterating over data, automating repetitive actions, or processing elements in a collection.

for Loop
Use Case: Iterate over sequences like list, tuple, string, or range.

for variable in sequence:

2. while Loop
 Use Case: Run a block of code as long as a condition is true (useful for unknown iteration counts).
 Syntax:

while condition:
    # code block
	
count = 1
while count <= 5:
    print(count)
    count += 1
