Kubernetes Assignment
Assignment 1
Tasks to be Performed:

Deploy a Kubernetes cluster with 3 nodes.

Create an NGINX deployment with 3 replicas.

Answer:

Steps Followed:

Installed Minikube and started a cluster with 3 nodes:

minikube start --nodes=3


Created an NGINX deployment with 3 replicas:

kubectl create deployment nginx --image=nginx
kubectl scale deployment nginx --replicas=3


Verified pods:

kubectl get pods


Result:
The cluster was running with 3 nodes, and 3 NGINX pods were deployed successfully.

Assignment 2
Tasks to be Performed:

Use the previous deployment.

Create a service of type NodePort for the NGINX deployment.

Check the NodePort service on a browser to verify.

Answer:

Steps Followed:

Exposed the deployment using NodePort:

kubectl expose deployment nginx --type=NodePort --port=80


Checked the NodePort assigned to the service:

kubectl get svc


Opened the browser and accessed the service via:

minikube service nginx


Result:
The NGINX default page was visible in the browser, confirming the service worked correctly.

Assignment 3
Tasks to be Performed:

Use the previous deployment.

Change the replicas to 5 for the deployment.

Answer:

Steps Followed:

Scaled the deployment to 5 replicas:

kubectl scale deployment nginx --replicas=5


Verified pods:

kubectl get pods


Result:
The NGINX deployment now had 5 running pods, confirming scaling worked successfully.

Assignment 4
Tasks to be Performed:

Use the previous deployment.

Change the service type to ClusterIP.

Answer:

Steps Followed:

Modified the service type:

kubectl patch svc nginx -p '{"spec": {"type": "ClusterIP"}}'


Verified the service:

kubectl get svc


Result:
The service type was successfully updated to ClusterIP, restricting access to within the cluster.

Assignment 5
Tasks to be Performed:

Use the previous deployment.

Deploy another NGINX deployment with 3 replicas.

Create an NGINX service of type ClusterIP.

Create an ingress service to route traffic.

Answer:

Steps Followed:

Created a new NGINX deployment:

kubectl create deployment nginx2 --image=nginx
kubectl scale deployment nginx2 --replicas=3


Created a ClusterIP service for the new deployment:

kubectl expose deployment nginx2 --type=ClusterIP --port=80


Created an ingress resource to route traffic to the service:

# nginx-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nginx-ingress
spec:
  rules:
  - host: nginx.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nginx2
            port:
              number: 80


Applied ingress:

kubectl apply -f nginx-ingress.yaml
